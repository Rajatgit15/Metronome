{"version":3,"sources":["click1.wav","click2.wav","Metronome.js","serviceWorker.js","index.js"],"names":["module","exports","Metronome","props","startStop","state","playing","clearInterval","timer","setState","setInterval","playClick","bpm","count","beatsPerMinute","click2","play","click1","handleBpmChange","event","target","value","Audio","this","className","type","min","max","onChange","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,sOCuG5BC,E,YA9FX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAcVC,UAAY,WACL,EAAKC,MAAMC,SAEVC,cAAc,EAAKC,OACnB,EAAKC,SAAS,CAACH,SAAQ,MAGvB,EAAKE,MAAQE,YAAY,EAAKC,UAAY,GAAG,EAAKN,MAAMO,IAAK,KACzD,EAAKH,SACD,CAACI,MAAM,EACPP,SAAS,GAET,EAAKK,aA3BH,EAiCtBA,UAAW,WAAK,IAAD,EACoB,EAAKN,MADzB,EACLQ,MADK,EACEC,iBACa,EAEtB,EAAKC,OAAOC,OAIZ,EAAKC,OAAOD,OAEhB,EAAKP,UAAS,SAAAJ,GAAK,MAAK,CACpBQ,OAAQR,EAAMQ,MAAO,GAAIR,EAAMS,oBA5CjB,EAgDlBI,gBAAkB,SAAAC,GACd,IAAMP,EAAMO,EAAMC,OAAOC,MACrB,EAAKhB,MAAMC,SAEXC,cAAc,EAAKC,OACnB,EAAKA,MAAQE,YAAY,EAAKC,UAAY,GAAKC,EAAO,KAGtD,EAAKH,SAAS,CACZI,MAAO,EACPD,SAIF,EAAKH,SAAS,CAAEG,SA5DpB,EAAKP,MAAQ,CACTC,SAAS,EACTO,MAAO,EACPD,IAAK,IACLE,eAAe,GAGnB,EAAKG,OAAS,IAAIK,MAAML,KACxB,EAAKF,OAAQ,IAAIO,MAAMP,KAVT,E,sEAqEjB,IAAD,EAC2BQ,KAAKlB,MAArBC,EADX,EACWA,QAASM,EADpB,EACoBA,IAEhB,OACA,yBAAKY,UAAY,aACT,yBAAKA,UAAY,cACd,6BAAMZ,EAAN,QACA,2BACAa,KAAO,QACPC,IAAM,KACLC,IAAM,MACNN,MAAST,EACTgB,SAAUL,KAAKL,mBAEnB,4BAAQW,QAAUN,KAAKnB,WAClBE,EAAU,OAAQ,c,GAtFfwB,IAAMC,WCKVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SD6HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.774f8712.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Metronome.css';\r\nimport click1 from './click1.wav';\r\nimport click2 from './click2.wav';\r\n\r\n\r\nclass Metronome extends React.Component\r\n{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            playing: false,\r\n            count: 0,\r\n            bpm: 100,\r\n            beatsPerMinute:4\r\n           \r\n        };\r\n        this.click1 = new Audio(click1);\r\n        this.click2= new Audio(click2);\r\n\r\n        \r\n    }\r\n\r\n    startStop = ()=>{\r\n        if(this.state.playing)\r\n        {\r\n            clearInterval(this.timer);\r\n            this.setState({playing:false});\r\n        }\r\n        else{\r\n            this.timer = setInterval(this.playClick, (60/this.state.bpm)*1000);\r\n                this.setState(\r\n                    {count:0,\r\n                    playing: true\r\n                    }, \r\n                    this.playClick\r\n                );\r\n        }\r\n    }\r\n            \r\n       \r\nplayClick =()=>{\r\n    const{count, beatsPerMinute} = this.state;\r\n    if(count%beatsPerMinute===0)\r\n    {\r\n        this.click2.play();\r\n\r\n    }\r\n    else{\r\n        this.click1.play();\r\n    }\r\n    this.setState(state => ({\r\n        count: (state.count +1)% state.beatsPerMinute\r\n    }));\r\n}\r\n    \r\n    handleBpmChange = event =>{\r\n        const bpm = event.target.value;\r\n        if (this.state.playing) {\r\n            // Stop the old timer and start a new one\r\n            clearInterval(this.timer);\r\n            this.timer = setInterval(this.playClick, (60 / bpm) * 1000);\r\n        \r\n            // Set the new BPM, and reset the beat counter\r\n            this.setState({\r\n              count: 0,\r\n              bpm\r\n            });\r\n          } else {\r\n            // Otherwise just update the BPM\r\n            this.setState({ bpm });\r\n          }\r\n        }\r\n        //here if we will use regular function instead of arrow function then the 'this'\r\n       // binding would be lost when it get passed to the onChange handler in render\r\n    \r\n    render()\r\n    {\r\n        const{ playing, bpm} = this.state;\r\n\r\n        return(\r\n        <div className = \"metronome\">\r\n                <div className = \"bpm-slider\">\r\n                   <div>{bpm} BPM</div>\r\n                   <input \r\n                   type = \"range\" \r\n                   min = \"60\"\r\n                    max = \"240\" \r\n                    value = {bpm}\r\n                    onChange={this.handleBpmChange}/>\r\n                </div>\r\n                <button onClick ={this.startStop}>\r\n                    {playing ? 'Stop' :'Start'}\r\n                </button>\r\n         </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Metronome;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Metronome from './Metronome';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Metronome />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}